#include <iostream>
#include <vector>

int main()
{
	std::vector<int> v2(8, 0); //создаём вектор с 8 нулями

	std::cout << v2.capacity() << std::endl;// выводим, сколько элементов может хранить v2

	v2.push_back(0); //пытаемся вставить ещё один ноль в v2

	std::cout << v2.capacity() << std::endl; //смотрим, сколько элементов может хранить v2 теперь

	v2.reserve(10);							//резервируем 10 в v2

	std::cout << v2.capacity() << std::endl;
	/*	
		ёмкость увеличилась на 4, т.е. в 1,5 раза (от 8)
		при попытке зарезервировать меньше, чем уже есть в веткоре, ничего не изменилось
	*/

	std::vector<int> v1;			//создаём вектор с именем v1

	std::cout << v1.capacity()<<std::endl; //выводим количество  элементов, 
											//которое вектор может содержать 
											//без выделения дополнительного пространства
	
	v1.reserve(10);							//резервируем минимум 10 элементов в нашем векторе
	
	std::cout << v1.capacity() << std::endl; //снова выводим количество элементов в векторе

	
	for ( int i = 0; i < 11; ++i)	//пытаемся "запихнуть 11 апельсинов в 10 коробочек"
	{
		v1.push_back(0);		//добавить элемент в конец вектора 
	}

	std::cout << v1.capacity() << std::endl;	//смотрим, что случилось с нашими "коробочками"

	/*
		ёмкость увеличилась на 5, т.е. в 1,5 раза (от 10)
	*/

	std::vector<int> v3(200000000, 0);

	std::cout << v3.capacity() << std::endl;
	
	v3.push_back(0);							//при попытке вставить в ооооочень большой вектор ещё одну "апельсинку" выдаёт ошибку: 
															// std::bad_alloc

	std::cout << v3.capacity() << std::endl;
}